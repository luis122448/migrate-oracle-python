<div
  class="rounded-lg shadow-lg p-6 mt-6 flex flex-col max-h-screen bg-gray-100 dark:bg-slate-900"
>
  <h3 class="text-xl font-bold mb-4 dark:text-white">Migration Logs</h3>
  <section class="flex justify-end mb-4">
    <button
      type="button"
      id="refresh-logs-btn"
      class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <span id="refresh-logs-text">Refresh Logs</span>
      <span id="refresh-logs-loading" class="hidden">
        <svg
          aria-hidden="true"
          role="status"
          class="inline w-4 h-4 me-3 text-white animate-spin"
          viewBox="0 0 100 101"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
            fill="#E5E7EB"></path>
          <path
            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
            fill="currentColor"></path>
        </svg>
        Loading...
      </span>
    </button>
  </section>
  <section class="relative overflow-x-auto overflow-y-auto min-h-96 max-h-96">
    <table
      class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 rounded-sm"
    >
      <thead
        class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
      >
        <tr>
          <th scope="col" class="px-6 py-3"> Filename </th>
          <th scope="col" class="px-6 py-3"> Actions </th>
        </tr>
      </thead>
      <tbody id="migration-logs-container">
        <!-- Logs will be rendered here -->
      </tbody>
    </table>
  </section>
</div>

<script
  lang="ts"
  type="module"
  define:vars={{ API_BASE_URL: import.meta.env.MIGRATE_API_BASE_URL }}
>
  console.log("MigrationLogs.astro script loaded.");

  function initializeMigrationLogs() {
    const refreshLogsBtn = document.getElementById("refresh-logs-btn")
    const refreshLogsText = document.getElementById("refresh-logs-text")
    const refreshLogsLoading = document.getElementById("refresh-logs-loading")
    const migrationLogsContainer = document.getElementById(
      "migration-logs-container"
    );

    if (!refreshLogsBtn || !migrationLogsContainer || !refreshLogsText || !refreshLogsLoading) {
      console.error("Error: One or more log elements not found.");
      return;
    }

    let allLogs = [];

    // --- Log Management ---
    async function fetchMigrationLogs() {
      refreshLogsBtn.disabled = true;
      refreshLogsText.classList.add("hidden");
      refreshLogsLoading.classList.remove("hidden");
      migrationLogsContainer.innerHTML = `<tr><td colspan="2" class="px-6 py-4 text-gray-500">Loading logs...</td></tr>`;

      try {
        const response = await fetch(
          `${API_BASE_URL}/erp/migrate/logs?log_type=migration`
        );
        if (!response.ok) throw new Error("Error fetching logs");
        const data = await response.json();
        if (data.status !== 1.0) {
          throw new Error(data.message || "Unknown error fetching logs");
        }
        allLogs = data.list; // Store logs
        renderMigrationLogs(allLogs);
      } catch (error) {
        console.error("Error in fetchMigrationLogs:", error);
        allLogs = []; // Clear logs on error
        migrationLogsContainer.innerHTML = `<tr><td colspan="2" class="px-6 py-4 text-red-500">Could not load logs: ${error.message}.</td></tr>`;
      } finally {
        refreshLogsBtn.disabled = false;
        refreshLogsText.classList.remove("hidden");
        refreshLogsLoading.classList.add("hidden");
      }
    }

    function renderMigrationLogs(logs) {
      migrationLogsContainer.innerHTML = "";
      if (logs.length === 0) {
        migrationLogsContainer.innerHTML = `<tr><td colspan="2" class="px-6 py-4 text-gray-500">No logs available.</td></tr>`;
        return;
      }
      logs.forEach((log) => {
        const logRow = document.createElement("tr");
        logRow.className =
          "bg-white border-b dark:bg-gray-800 dark:border-gray-700 border-gray-200";
        logRow.innerHTML = `
          <td class="px-6 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white">
            ${log.filename}
          </td>
          <td class="px-6 py-1 w-fit whitespace-nowrap">
            <button type="button" class="download-single-log-btn text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-sm text-sm px-2 py-1 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-900" data-filename="${
              log.filename
            }" data-content="${encodeURIComponent(log.content)}">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </td>
        `;
        migrationLogsContainer.appendChild(logRow);
      });
    }

    function downloadSingleLog(filename, content) {
      const blob = new Blob([content], { type: "text/plain" });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    }

    function downloadMigrationLogs() {
      if (allLogs.length === 0) {
        alert("No logs to download.");
        return;
      }

      const combinedContent = allLogs
        .map((log) => {
          return `--- LOG: ${log.filename} ---\n${log.content}`;
        })
        .join("\n\n");

      downloadSingleLog("migration_logs.txt", combinedContent);
    }

    // Initial fetch of logs
    fetchMigrationLogs();

    // Event Listeners for log buttons
    refreshLogsBtn.addEventListener("click", fetchMigrationLogs);

    migrationLogsContainer.addEventListener("click", (e) => {
      const target = e.target.closest(".download-single-log-btn");
      if (target) {
        const filename = target.dataset.filename;
        const content = decodeURIComponent(target.dataset.content);
        downloadSingleLog(filename, content);
      }
    });
  }

  document.addEventListener("DOMContentLoaded", initializeMigrationLogs);
</script>
