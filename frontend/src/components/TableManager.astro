<div class="rounded-lg shadow-lg p-6 mt-6 flex flex-col max-h-screen bg-gray-100 dark:bg-slate-900">
  <h3 class="text-xl font-bold mb-4 dark:text-white">Migration Tables</h3>
  <section class="flex justify-between items-center mb-4">
    <div>
      <input
        type="text"
        id="new-table-name"
        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        placeholder="Table Name"
        required
      />
    </div>
    <div class="flex items-center space-x-2">
      <button
        type="button"
        id="add-table-form"
        class="focus:outline-none text-white bg-green-700 hover:bg-green-800 focus:ring-4 focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-green-600 dark:hover:bg-green-700 dark:focus:ring-green-800"
        >Add Table</button
      >
      <button
        type="button"
        id="delete-all-btn"
        data-modal-target="confirmation-modal-table"
        data-modal-toggle="confirmation-modal-table"
        class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900"
        >Delete All</button
      >
      <button
        type="button"
        id="restore-btn"
        data-modal-target="confirmation-modal-table"
        data-modal-toggle="confirmation-modal-table"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
        >Restore Default</button
      >
    </div>
  </section>
  <div class="relative overflow-x-auto overflow-y-auto flex-1 max-h-96">
    <table
      class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 rounded-sm"
    >
      <thead
        class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
      >
        <tr>
          <th scope="col" class="px-6 py-3"> TABLE NAME </th>
          <th scope="col" class="px-6 py-3 w-fit whitespace-nowrap"> ACTIONS </th>
        </tr>
      </thead>
      <tbody id="tables-container">
        <!-- Tables will be rendered here -->
      </tbody>
    </table>
  </div>
</div>

<!-- Confirmation Modal -->
<section
  id="confirmation-modal-table"
  tabindex="-1"
  class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full"
>
  <div class="relative p-4 w-full max-w-md max-h-full">
    <div class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700">
      <button
        type="button"
        class="absolute top-3 end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
        data-modal-hide="confirmation-modal-table"
      >
        <svg
          class="w-3 h-3"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 14 14"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path>
        </svg>
        <span class="sr-only">Close modal</span>
      </button>
      <div class="p-4 md:p-5 text-center">
        <svg
          class="mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 20 20"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
        </svg>
        <h3 id="modal-text" class="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">
          Are you sure?
        </h3>
        <button
          id="confirm-action-btn"
          data-modal-hide="confirmation-modal-table"
          type="button"
          class="text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:outline-none dark:focus:ring-red-800 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center"
        >
          Yes, I'm sure
        </button>
        <button
          id="cancel-action-btn"
          data-modal-hide="confirmation-modal-table"
          type="button"
          class="py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
          >No, cancel</button
        >
      </div>
    </div>
  </div>
</section>

<script
  lang="ts"
  type="module"
  define:vars={{ API_BASE_URL: import.meta.env.MIGRATE_API_BASE_URL }}
>
  console.log("TableManager.astro script loaded.");
  function initializeTableManager() {
    const tablesBody = document.getElementById("tables-container");
    const addTableButton = document.getElementById("add-table-form");
    const newTableNameInput = document.getElementById("new-table-name");
    const deleteAllBtn = document.getElementById("delete-all-btn");
    const restoreBtn = document.getElementById("restore-btn");
    
    const modal = document.getElementById("confirmation-modal-table");
    const modalText = document.getElementById("modal-text");
    const confirmActionBtn = document.getElementById("confirm-action-btn");
    const cancelActionBtn = document.getElementById("cancel-action-btn");

    let actionToConfirm = null;

    if (!tablesBody || !addTableButton || !newTableNameInput || !deleteAllBtn || !restoreBtn || !modal || !modalText || !confirmActionBtn || !cancelActionBtn) {
      console.error("Error: One or more table manager elements not found.");
      return;
    }

    // --- API Functions ---
    async function fetchTables() {
      try {
        const response = await fetch(`${API_BASE_URL}/config/tables`);
        if (!response.ok) throw new Error("Error loading tables");
        const data = await response.json();
        renderTables(data.tables);
      } catch (error) {
        console.error("Error in fetchTables:", error);
        tablesBody.innerHTML = `<tr><td colspan="2" class="px-6 py-4 text-red-500">Could not load tables.</td></tr>`;
      }
    }

    async function addTable(tableName) {
      try {
        const response = await fetch(`${API_BASE_URL}/config/tables`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ table_name: tableName }),
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || "Error adding table");
        }
        const data = await response.json();
        renderTables(data.tables);
        newTableNameInput.value = "";
      } catch (error) {
        console.error("Error in addTable:", error);
        alert(error.message);
      }
    }

    async function deleteTable(tableName) {
      if (!confirm(`Are you sure you want to delete table "${tableName}"?`)) return;
      try {
        const response = await fetch(
          `${API_BASE_URL}/config/tables/${tableName}`,
          {
            method: "DELETE",
          }
        );
        if (!response.ok) throw new Error("Error deleting table");
        const data = await response.json();
        renderTables(data.tables);
      } catch (error) {
        console.error("Error in deleteTable:", error);
        alert("Could not delete table.");
      }
    }

    async function deleteAllTables() {
      try {
        const response = await fetch(`${API_BASE_URL}/config/tables`, {
          method: "DELETE",
        });
        if (!response.ok) throw new Error("Error deleting tables");
        const data = await response.json();
        renderTables(data.tables);
      } catch (error) {
        console.error("Error in deleteAllTables:", error);
        alert("Could not delete tables.");
      }
    }

    async function restoreTables() {
      try {
        const response = await fetch(`${API_BASE_URL}/config/restore`, {
          method: "POST",
        });
        if (!response.ok) throw new Error("Error restoring tables");
        const data = await response.json();
        renderTables(data.tables);
      } catch (error) {
        console.error("Error in restoreTables:", error);
        alert("Could not restore configuration.");
      }
    }

    // --- Rendering ---
    function renderTables(tables) {
      tablesBody.innerHTML = "";
      if (tables.length === 0) {
        tablesBody.innerHTML = `<tr><td colspan="2" class="px-6 py-4 text-gray-500">No tables configured.</td></tr>`;
        return;
      }
      tables.forEach((table) => {
        const tableRow = document.createElement("tr");
        tableRow.className = "bg-white border-b dark:bg-gray-800 dark:border-gray-700 border-gray-200";
        tableRow.innerHTML = `
          <th scope="row" class="px-6 py-1 font-medium text-gray-900 whitespace-nowrap dark:text-white">
            ${table}
          </th>
          <td class="px-6 py-1 w-fit whitespace-nowrap">
            <button type="button" class="text-white bg-red-700 hover:bg-red-800 focus:outline-none focus:ring-4 focus:ring-red-300 font-medium rounded-sm text-sm px-2 py-1 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900" data-table="${table}"><i class="fas fa-trash-alt fa-sm"></i></button>
          </td>
        `;
        tablesBody.appendChild(tableRow);
      });
    }

    // --- Event Listeners ---

    document.addEventListener("DOMContentLoaded", fetchTables);

    addTableButton.addEventListener("click", () => {
      const tableName = newTableNameInput.value.trim();
      if (tableName) {
        addTable(tableName);
      }
    });

    tablesBody.addEventListener("click", (e) => {
      const target = e.target.closest('button');
      if (target && target.dataset.table) {
        deleteTable(target.dataset.table);
      }
    });

    deleteAllBtn.addEventListener("click", () => {
        modalText.textContent = "Are you sure you want to delete ALL tables?";
        actionToConfirm = deleteAllTables;
    });

    restoreBtn.addEventListener("click", () => {
        modalText.textContent = "Are you sure you want to restore the configuration from backup?";
        actionToConfirm = restoreTables;
    });

    confirmActionBtn.addEventListener("click", () => {
        if (actionToConfirm) {
            actionToConfirm();
        }
    });
  }

  initializeTableManager();
</script>